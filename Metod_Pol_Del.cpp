#include <iostream>
#include <cmath>

using namespace std;

// Функция, корень которой мы ищем
double f(double x) {
    return 0.25 * pow(x, 3) + x - 1.2502; 
}

int main() {
    double a = 0, b = 2, c; // Границы отрезка [a, b], на котором ищется корень, и переменная для середины отрезка
    double epsilon = pow(10, -6); // Задаем точность вычислений
    int iterations = 0;       // Счетчик количества итераций

    // Проверка условия существования корня на отрезке [a, b]  
    if (f(a) * f(b) >= 0) {
        cout << "Метод половинного деления неприменим на этом интервале." << endl;
        return 1; // Завершаем программу с ошибкой, если условие не выполняется
    }

    // Цикл метода половинного деления
    while (abs(b - a) / 2 > epsilon) { // Цикл продолжается пока ширина интервала больше заданной точности
        c = (a + b) / 2;          // Находим середину отрезка
        if (f(c) * f(a) < 0) {   // Если функция меняет знак на отрезке [a, c]
            b = c;              // То новый отрезок [a, c]
        }
        else {                 
            a = c;              // Новый отрезок [c, b]
        }
        iterations++; // Увеличиваем счетчик итераций
    }

    cout << "Приближенное значение корня: " << (a + b) / 2 << endl; // Выводим приближенное значение корня 
    cout << "Количество итераций: " << iterations << endl;       // Выводим количество итераций

    return 0;
}
